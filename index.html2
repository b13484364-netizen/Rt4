<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تطبيق المحادثة الآمن - Firebase</title>
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-storage-compat.js"></script>
    
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                        secondary: '#7C3AED'
                    }
                }
            }
        }
    </script>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .dark .gradient-bg { background: linear-gradient(135deg, #2D3748 0%, #1A202C 100%); }
        .message-animation { 
            animation: slideUp 0.3s ease-out;
            opacity: 0;
            animation-fill-mode: forwards;
        }
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .image-hover { transition: all 0.3s ease; }
        .image-hover:hover { transform: scale(1.05); }
        input[type="password"], input[type="text"], input[type="number"], textarea { font-size: 16px; }
        .fade-in { animation: fadeIn 0.5s ease-in; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .notification {
            animation: slideInRight 0.3s ease-out;
        }
        @keyframes slideInRight {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
        .online-indicator {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .typing-indicator {
            animation: typing 1.5s infinite;
        }
        @keyframes typing {
            0%, 60%, 100% { opacity: 0.5; }
            30% { opacity: 1; }
        }
    </style>
</head>
<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-colors duration-300">
    
    <!-- إشعارات الاتصال -->
    <div id="connectionStatus" class="hidden fixed top-4 right-4 z-50 notification">
        <div class="bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2 space-x-reverse">
            <div class="w-3 h-3 bg-white rounded-full online-indicator"></div>
            <span id="statusText">متصل بـ Firebase</span>
        </div>
    </div>

    <!-- إعداد Firebase -->
    <div id="firebaseSetup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-lg w-full p-8">
            <div class="text-center mb-6">
                <div class="text-6xl mb-4">🔥</div>
                <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-2">إعداد Firebase</h2>
                <p class="text-gray-600 dark:text-gray-300 text-sm">
                    يمكنك استخدام إعدادات Firebase الخاصة بك أو الضغط على "تجربة العرض التوضيحي"
                </p>
            </div>
            
            <div class="space-y-4">
                <div>
                    <label class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">
                        Firebase API Key:
                    </label>
                    <input type="text" id="firebaseApiKey" 
                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg 
                                  focus:outline-none focus:border-primary dark:bg-gray-700 dark:text-white text-sm"
                           placeholder="اختياري - اتركه فارغاً للعرض التوضيحي">
                </div>
                
                <div>
                    <label class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">
                        Database URL:
                    </label>
                    <input type="text" id="firebaseDatabaseUrl" 
                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg 
                                  focus:outline-none focus:border-primary dark:bg-gray-700 dark:text-white text-sm"
                           placeholder="https://your-project-default-rtdb.firebaseio.com">
                </div>
            </div>
            
            <div class="mt-6 space-y-3">
                <button id="initFirebaseBtn" 
                        class="w-full bg-primary hover:bg-primary/90 text-white font-bold py-3 px-6 rounded-xl transition-all">
                    🚀 بدء التطبيق
                </button>
                
                <button id="demoModeBtn" 
                        class="w-full bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-xl transition-all">
                    🎭 العرض التوضيحي (بدون Firebase)
                </button>
            </div>
            
            <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-800">
                <p class="text-xs text-blue-700 dark:text-blue-300 text-center">
                    💡 <strong>نصيحة:</strong> إذا لم يكن لديك مشروع Firebase، اضغط "العرض التوضيحي" للتجربة
                </p>
            </div>
        </div>
    </div>

    <!-- شاشة إعداد الغرفة -->
    <div id="loginScreen" class="hidden min-h-screen gradient-bg flex items-center justify-center p-4">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-4xl w-full p-8 fade-in">
            <!-- العنوان -->
            <div class="text-center mb-8">
                <h1 class="text-4xl font-bold text-gray-800 dark:text-white mb-4">🔐 تطبيق المحادثة الآمن</h1>
                <p class="text-gray-600 dark:text-gray-300 text-lg">اختر نفس الصورة وكلمة المرور للانضمام لنفس الغرفة</p>
                <div class="mt-4 flex items-center justify-center space-x-6 space-x-reverse text-sm text-gray-500">
                    <div class="flex items-center">
                        <span class="w-2 h-2 bg-green-500 rounded-full ml-2 online-indicator"></span>
                        محادثة مباشرة
                    </div>
                    <div class="flex items-center">
                        <span class="w-2 h-2 bg-blue-500 rounded-full ml-2"></span>
                        تشفير آمن
                    </div>
                    <div class="flex items-center">
                        <span class="w-2 h-2 bg-purple-500 rounded-full ml-2"></span>
                        مدعوم بـ Firebase
                    </div>
                </div>
            </div>

            <div class="grid lg:grid-cols-2 gap-8">
                <!-- الجانب الأيسر -->
                <div class="space-y-6">
                    <!-- معلومات المستخدم -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
                        <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white flex items-center">
                            👤 معلومات المستخدم
                        </h3>
                        <div class="space-y-4">
                            <div>
                                <label class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">
                                    اسم المستخدم:
                                </label>
                                <input type="text" id="usernameInput" 
                                       class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg 
                                              focus:outline-none focus:border-primary dark:bg-gray-600 dark:text-white text-base"
                                       placeholder="أدخل اسمك الذي سيظهر للآخرين"
                                       maxlength="30" required>
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">
                                    كلمة المرور:
                                </label>
                                <input type="password" id="passwordInput" 
                                       class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg 
                                              focus:outline-none focus:border-primary dark:bg-gray-600 dark:text-white text-base"
                                       placeholder="أدخل كلمة مرور قوية"
                                       required>
                                <p class="text-xs text-gray-500 mt-1">شارك نفس كلمة المرور مع أصدقائك للانضمام</p>
                            </div>
                        </div>
                    </div>

                    <!-- خيارات الغرفة -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
                        <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white flex items-center">
                            ⚙️ خيارات الغرفة
                        </h3>
                        <div class="space-y-3">
                            <label class="flex items-center space-x-3 space-x-reverse">
                                <input type="checkbox" id="privateRoom" class="rounded border-gray-300 text-primary focus:ring-primary">
                                <span class="text-sm text-gray-700 dark:text-gray-300">غرفة خاصة (لا تظهر في القائمة العامة)</span>
                            </label>
                            <label class="flex items-center space-x-3 space-x-reverse">
                                <input type="checkbox" id="allowImages" class="rounded border-gray-300 text-primary focus:ring-primary" checked>
                                <span class="text-sm text-gray-700 dark:text-gray-300">السماح بإرسال الصور</span>
                            </label>
                        </div>
                    </div>
                </div>

                <!-- الجانب الأيمن -->
                <div class="space-y-6">
                    <!-- معرض الصور -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
                        <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white flex items-center">
                            🖼️ اختر رمز الغرفة
                        </h3>
                        <div id="imageGallery" class="grid grid-cols-4 gap-3 mb-4 min-h-[200px]">
                            <!-- سيتم ملء الصور هنا بواسطة JavaScript -->
                        </div>
                        
                        <button id="uploadImageBtn"
                                class="w-full bg-secondary hover:bg-secondary/90 text-white font-medium py-3 px-6 rounded-lg 
                                       transition-all duration-300 flex items-center justify-center space-x-2 space-x-reverse">
                            <span>📤</span>
                            <span>رفع صورة مخصصة</span>
                        </button>
                        <input type="file" id="customImageInput" accept="image/*" class="hidden">
                    </div>

                    <!-- زر دخول الغرفة -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
                        <button id="enterRoomBtn" 
                                class="w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 
                                       text-white font-bold py-4 px-6 rounded-xl text-lg
                                       transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none
                                       shadow-lg hover:shadow-xl">
                            <span id="enterBtnText">⚠️ يرجى إكمال البيانات</span>
                        </button>
                        
                        <div class="mt-4 p-3 bg-green-50 dark:bg-green-900/30 rounded-lg border border-green-200 dark:border-green-800">
                            <p class="text-sm text-green-700 dark:text-green-300">
                                ✨ <strong>نصيحة:</strong> شارك نفس الصورة وكلمة المرور مع أصدقائك للانضمام لنفس الغرفة
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- الغرف النشطة -->
            <div class="mt-8 p-6 bg-blue-50 dark:bg-blue-900/30 rounded-xl border border-blue-200 dark:border-blue-800">
                <h3 class="font-semibold mb-3 text-blue-800 dark:text-blue-200 flex items-center">
                    🏠 الغرف النشطة
                </h3>
                <div id="activeRoomsList" class="text-sm text-blue-700 dark:text-blue-300">
                    جاري تحميل الغرف النشطة...
                </div>
            </div>
        </div>
    </div>

    <!-- غرفة المحادثة -->
    <div id="chatScreen" class="hidden min-h-screen flex flex-col">
        <!-- شريط علوي -->
        <div class="bg-white dark:bg-gray-800 shadow-lg border-b border-gray-200 dark:border-gray-700">
            <div class="max-w-6xl mx-auto px-4 py-3">
                <div class="flex items-center justify-between">
                    <!-- معلومات الغرفة -->
                    <div class="flex items-center space-x-4 space-x-reverse">
                        <div id="roomImagePreview" class="w-12 h-12 rounded-full overflow-hidden border-3 border-primary shadow-lg">
                            <!-- صورة الغرفة -->
                        </div>
                        <div>
                            <h1 class="text-xl font-bold text-gray-800 dark:text-white flex items-center">
                                🔐 غرفة المحادثة الآمنة
                                <div class="w-2 h-2 bg-green-500 rounded-full mr-2 online-indicator"></div>
                            </h1>
                            <div class="flex items-center space-x-4 space-x-reverse text-sm text-gray-600 dark:text-gray-300">
                                <span id="roomStatus">متصل</span>
                                <span id="userCount">• 1 مستخدم</span>
                                <span id="messageCount">• 0 رسالة</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- أزرار التحكم -->
                    <div class="flex items-center space-x-3 space-x-reverse">
                        <!-- قائمة المستخدمين -->
                        <div class="relative">
                            <button id="usersBtn" class="bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 p-3 rounded-lg transition-colors">
                                👥
                            </button>
                            <div id="usersDropdown" class="hidden absolute left-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 z-10">
                                <div class="p-3 border-b border-gray-200 dark:border-gray-700">
                                    <h3 class="font-semibold text-gray-800 dark:text-white">المستخدمين المتصلين</h3>
                                </div>
                                <div id="usersList" class="p-3 max-h-64 overflow-y-auto">
                                    <!-- قائمة المستخدمين -->
                                </div>
                            </div>
                        </div>
                        
                        <!-- قائمة الخيارات -->
                        <div class="relative">
                            <button id="menuBtn" class="bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 p-3 rounded-lg transition-colors">
                                ⚙️
                            </button>
                            <div id="menuDropdown" class="hidden absolute left-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 z-10">
                                <button id="shareRoomBtn" class="w-full text-right px-4 py-3 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors flex items-center space-x-2 space-x-reverse">
                                    <span>📤</span>
                                    <span>مشاركة معلومات الغرفة</span>
                                </button>
                                <button id="clearChatBtn" class="w-full text-right px-4 py-3 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors flex items-center space-x-2 space-x-reverse">
                                    <span>🧹</span>
                                    <span>مسح المحادثة</span>
                                </button>
                                <hr class="border-gray-200 dark:border-gray-700">
                                <button id="leaveRoomBtn" class="w-full text-right px-4 py-3 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors flex items-center space-x-2 space-x-reverse">
                                    <span>🚪</span>
                                    <span>مغادرة الغرفة</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- منطقة المحادثة -->
        <div class="flex-1 flex flex-col max-w-6xl mx-auto w-full">
            <!-- الرسائل -->
            <div id="messagesContainer" class="flex-1 overflow-y-auto p-4 space-y-4 min-h-0">
                <!-- رسالة الترحيب -->
                <div class="text-center py-8">
                    <div class="text-4xl mb-4">🎉</div>
                    <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">مرحباً بك في الغرفة!</h3>
                    <p class="text-gray-500 dark:text-gray-400 text-sm mt-2">ابدأ المحادثة الآن...</p>
                </div>
            </div>

            <!-- مؤشر الكتابة -->
            <div id="typingIndicator" class="hidden px-4 py-2">
                <div class="flex items-center space-x-2 space-x-reverse text-sm text-gray-500">
                    <div class="flex space-x-1">
                        <div class="w-1 h-1 bg-gray-400 rounded-full typing-indicator"></div>
                        <div class="w-1 h-1 bg-gray-400 rounded-full typing-indicator" style="animation-delay: 0.2s;"></div>
                        <div class="w-1 h-1 bg-gray-400 rounded-full typing-indicator" style="animation-delay: 0.4s;"></div>
                    </div>
                    <span id="typingText">شخص ما يكتب...</span>
                </div>
            </div>

            <!-- منطقة الكتابة -->
            <div class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4">
                <div class="flex items-end space-x-4 space-x-reverse">
                    <!-- حقل الكتابة -->
                    <div class="flex-1 relative">
                        <textarea id="messageInput" 
                                  class="w-full p-4 pr-12 border border-gray-300 dark:border-gray-600 rounded-xl 
                                         resize-none focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20
                                         dark:bg-gray-700 dark:text-white text-base max-h-32"
                                  placeholder="اكتب رسالتك هنا... (Enter للإرسال، Shift+Enter لسطر جديد)" 
                                  rows="2"></textarea>
                        
                        <!-- عداد الأحرف -->
                        <div id="charCount" class="absolute bottom-2 left-2 text-xs text-gray-400">0/500</div>
                    </div>
                    
                    <!-- أزرار الإرسال -->
                    <div class="flex flex-col space-y-2">
                        <button id="sendImageBtn" 
                                class="bg-secondary hover:bg-secondary/90 text-white p-3 rounded-xl transition-colors flex items-center justify-center group"
                                title="إرسال صورة">
                            <span class="text-xl group-hover:scale-110 transition-transform">📷</span>
                        </button>
                        <button id="sendMessageBtn" 
                                class="bg-primary hover:bg-primary/90 text-white p-3 rounded-xl transition-colors flex items-center justify-center group"
                                title="إرسال رسالة">
                            <span class="text-xl group-hover:scale-110 transition-transform">🚀</span>
                        </button>
                    </div>
                </div>
                
                <input type="file" id="imageMessageInput" accept="image/*" class="hidden">
                
                <!-- معلومات إضافية -->
                <div class="mt-3 flex items-center justify-between text-xs text-gray-500">
                    <span id="connectionInfo">متصل بـ Firebase</span>
                    <span id="lastSeen"></span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // إعداد الوضع المظلم
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });

        // الصور المتاحة - سيتم إنشاؤها برمجياً
        const availableImages = [
            { name: 'الجبال الثلجية', id: 'mountain_snow', emoji: '🏔️', color: '#3B82F6' },
            { name: 'الغابة الخضراء', id: 'green_forest', emoji: '🌲', color: '#10B981' },
            { name: 'أشجار النخيل', id: 'palm_trees', emoji: '🌴', color: '#F59E0B' },
            { name: 'التقنية الحديثة', id: 'modern_tech', emoji: '💻', color: '#8B5CF6' },
            { name: 'غابة الخيزران', id: 'bamboo_forest', emoji: '🎋', color: '#84CC16' },
            { name: 'قمة الجبل', id: 'mountain_peak', emoji: '⛰️', color: '#EC4899' },
            { name: 'العالم المائي', id: 'underwater', emoji: '🌊', color: '#06B6D4' },
            { name: 'مغامر التسلق', id: 'mountain_hiker', emoji: '🧗', color: '#EF4444' }
        ];

        // متغيرات التطبيق
        let selectedImage = null;
        let currentRoom = null;
        let currentUser = null;
        let database = null;
        let storage = null;
        let messagesRef = null;
        let usersRef = null;
        let typingRef = null;
        let isFirebaseReady = false;
        let isDemoMode = false;
        let demoStorage = {};
        let typingTimeout = null;
        let lastActivity = Date.now();

        // عناصر DOM
        let firebaseSetup, loginScreen, chatScreen, imageGallery, usernameInput, passwordInput;
        let enterRoomBtn, enterBtnText, uploadImageBtn, customImageInput, privateRoom, allowImages;
        let roomImagePreview, messagesContainer, messageInput, sendMessageBtn, sendImageBtn;
        let imageMessageInput, charCount, connectionStatus, statusText, userCount, messageCount;
        let roomStatus, menuBtn, menuDropdown, shareRoomBtn, clearChatBtn, leaveRoomBtn;
        let usersBtn, usersDropdown, usersList, typingIndicator, typingText, activeRoomsList;
        let connectionInfo, lastSeen;

        // دالة إنشاء صورة SVG
        function createSVGImage(image) {
            const svg = `
                <svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
                    <rect width="100%" height="100%" fill="${image.color}"/>
                    <text x="50%" y="45%" font-size="40" text-anchor="middle" dy=".3em" fill="white">${image.emoji}</text>
                    <text x="50%" y="65%" font-size="14" text-anchor="middle" dy=".3em" fill="white" font-family="Arial">${image.name}</text>
                </svg>
            `;
            return 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svg);
        }

        // إعداد Firebase أو Demo Mode
        function initializeFirebase(apiKey = null, databaseUrl = null) {
            if (apiKey && databaseUrl) {
                try {
                    const firebaseConfig = {
                        apiKey: apiKey,
                        databaseURL: databaseUrl,
                        storageBucket: apiKey.includes('demo') ? null : `${apiKey.split(':')[0]}.appspot.com`
                    };

                    firebase.initializeApp(firebaseConfig);
                    database = firebase.database();
                    if (firebaseConfig.storageBucket) {
                        storage = firebase.storage();
                    }
                    isFirebaseReady = true;
                    isDemoMode = false;

                    showConnectionStatus('متصل بـ Firebase', 'success');
                    console.log('✅ Firebase تم تهيئته بنجاح');
                } catch (error) {
                    console.error('خطأ في تهيئة Firebase:', error);
                    initDemoMode();
                }
            } else {
                initDemoMode();
            }
        }

        // تهيئة Demo Mode
        function initDemoMode() {
            isDemoMode = true;
            isFirebaseReady = true;

            // محاكاة Firebase API
            database = {
                ref: function(path) {
                    return {
                        push: function(data) {
                            const key = 'demo_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                            if (!demoStorage[path]) demoStorage[path] = {};
                            demoStorage[path][key] = { ...data, timestamp: Date.now() };
                            
                            // محاكاة real-time updates
                            setTimeout(() => {
                                this.callbacks.forEach(callback => {
                                    callback({ key: key, val: () => demoStorage[path][key] });
                                });
                            }, 100);
                            
                            return { key: key };
                        },
                        set: function(data) {
                            demoStorage[path] = data;
                            setTimeout(() => {
                                this.callbacks.forEach(callback => {
                                    callback({ val: () => data });
                                });
                            }, 100);
                        },
                        on: function(event, callback) {
                            if (!this.callbacks) this.callbacks = [];
                            this.callbacks.push(callback);
                            
                            // إرسال البيانات الحالية
                            if (demoStorage[path]) {
                                Object.keys(demoStorage[path]).forEach(key => {
                                    setTimeout(() => {
                                        callback({ key: key, val: () => demoStorage[path][key] });
                                    }, 50);
                                });
                            }
                        },
                        off: function() {
                            this.callbacks = [];
                        },
                        remove: function() {
                            delete demoStorage[path];
                        },
                        once: function(event, callback) {
                            const data = demoStorage[path] || {};
                            callback({ val: () => data });
                        }
                    };
                }
            };

            showConnectionStatus('وضع العرض التوضيحي', 'warning');
            console.log('🎭 Demo Mode مُفعّل');
        }

        // إدارة حالة الاتصال
        function showConnectionStatus(message, type = 'error') {
            if (!statusText) return;
            statusText.textContent = message;
            
            const statusDiv = connectionStatus.querySelector('div');
            statusDiv.className = `px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2 space-x-reverse ${
                type === 'success' ? 'bg-green-500' : 
                type === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
            } text-white`;
            
            connectionStatus.classList.remove('hidden');
            
            if (type === 'success' || type === 'warning') {
                setTimeout(() => {
                    connectionStatus.classList.add('hidden');
                }, 3000);
            }
        }

        // تحميل الصور في المعرض
        function loadImageGallery() {
            if (!imageGallery) return;

            imageGallery.innerHTML = '';
            availableImages.forEach((image, index) => {
                image.url = createSVGImage(image);
                
                const imageDiv = document.createElement('div');
                imageDiv.className = `image-hover cursor-pointer rounded-lg overflow-hidden border-3 border-transparent 
                                     hover:border-primary transition-all aspect-square relative bg-gray-100 dark:bg-gray-600`;
                
                imageDiv.innerHTML = `
                    <img src="${image.url}" alt="${image.name}" class="w-full h-full object-cover">
                    <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-30 transition-all 
                                flex items-center justify-center">
                        <span class="text-white text-xs font-bold opacity-0 hover:opacity-100 transition-opacity
                                   bg-black bg-opacity-70 px-2 py-1 rounded">
                            ${image.emoji} ${image.name}
                        </span>
                    </div>
                    <div class="absolute top-1 right-1 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded">
                        ${index + 1}
                    </div>
                `;
                
                imageDiv.addEventListener('click', () => selectImage(image, imageDiv));
                imageGallery.appendChild(imageDiv);
            });
            
            console.log('✅ تم تحميل', availableImages.length, 'صورة في المعرض');
        }

        // اختيار صورة
        function selectImage(image, element) {
            document.querySelectorAll('.border-primary').forEach(el => {
                el.classList.remove('border-primary');
                el.classList.add('border-transparent');
            });
            
            element.classList.add('border-primary');
            element.classList.remove('border-transparent');
            
            selectedImage = image;
            updateEnterButton();
        }

        // تحديث زر الدخول
        function updateEnterButton() {
            if (!enterRoomBtn || !enterBtnText || !passwordInput || !usernameInput) return;
            
            const hasImage = selectedImage !== null;
            const hasUsername = usernameInput.value.trim().length > 0;
            const hasPassword = passwordInput.value.trim().length > 0;
            
            enterRoomBtn.disabled = !(hasImage && hasUsername && hasPassword);
            
            if (hasImage && hasUsername && hasPassword) {
                enterRoomBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                enterBtnText.textContent = '💬 دخول الغرفة';
            } else {
                enterRoomBtn.classList.add('opacity-50', 'cursor-not-allowed');
                if (!hasImage) {
                    enterBtnText.textContent = '🖼️ اختر صورة للغرفة';
                } else if (!hasUsername) {
                    enterBtnText.textContent = '👤 أدخل اسم المستخدم';
                } else if (!hasPassword) {
                    enterBtnText.textContent = '🔒 أدخل كلمة المرور';
                }
            }
        }

        // إنشاء مفتاح الغرفة
        function generateRoomKey(image, password) {
            const combined = `${image.id}_${password}`;
            let hash = 0;
            for (let i = 0; i < combined.length; i++) {
                const char = combined.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash;
            }
            return Math.abs(hash).toString(36);
        }

        // تحميل الغرف النشطة
        function loadActiveRooms() {
            if (!database || !activeRoomsList) return;

            const roomsRef = database.ref('publicRooms');
            roomsRef.on('value', (snapshot) => {
                const rooms = snapshot.val() || {};
                const activeRooms = Object.values(rooms).filter(room => {
                    const elapsed = Date.now() - room.createdAt;
                    return elapsed < (24 * 60 * 60 * 1000); // 24 ساعة
                });

                if (activeRooms.length > 0) {
                    activeRoomsList.innerHTML = activeRooms.map(room => `
                        <div class="flex items-center justify-between py-2 border-b border-blue-200 dark:border-blue-700 last:border-b-0">
                            <div class="flex items-center space-x-2 space-x-reverse">
                                <span class="text-lg">${room.image.emoji}</span>
                                <span class="font-medium">${room.image.name}</span>
                            </div>
                            <div class="text-xs">
                                ${room.userCount || 0} مستخدم
                            </div>
                        </div>
                    `).join('');
                } else {
                    activeRoomsList.innerHTML = '<p class="text-center py-4">لا توجد غرف نشطة حالياً</p>';
                }
            });
        }

        // دخول الغرفة
        function enterRoom() {
            if (!selectedImage || !usernameInput.value.trim() || !passwordInput.value.trim()) {
                showAlert('يرجى إكمال جميع البيانات المطلوبة');
                return;
            }

            if (!isFirebaseReady) {
                showAlert('جاري تهيئة الاتصال، يرجى المحاولة بعد قليل');
                return;
            }

            const roomKey = generateRoomKey(selectedImage, passwordInput.value.trim());
            currentRoom = roomKey;
            currentUser = {
                id: 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                username: usernameInput.value.trim(),
                joinTime: Date.now(),
                lastSeen: Date.now(),
                image: selectedImage
            };

            // الانتقال لشاشة المحادثة
            loginScreen.classList.add('hidden');
            chatScreen.classList.remove('hidden');
            
            // تحديث واجهة الغرفة
            if (roomImagePreview) {
                roomImagePreview.innerHTML = `<img src="${selectedImage.url}" alt="${selectedImage.name}" class="w-full h-full object-cover">`;
            }
            if (roomStatus) roomStatus.textContent = currentUser.username;
            
            // إعداد مراجع Firebase
            messagesRef = database.ref(`rooms/${roomKey}/messages`);
            usersRef = database.ref(`rooms/${roomKey}/users/${currentUser.id}`);
            typingRef = database.ref(`rooms/${roomKey}/typing`);

            // تسجيل المستخدم في الغرفة
            usersRef.set(currentUser);

            // إضافة للغرف العامة إذا لم تكن خاصة
            if (!privateRoom.checked) {
                const publicRoomRef = database.ref(`publicRooms/${roomKey}`);
                publicRoomRef.set({
                    key: roomKey,
                    image: selectedImage,
                    createdAt: Date.now(),
                    userCount: 1
                });
            }

            // الاستماع للرسائل
            messagesRef.on('child_added', (snapshot) => {
                const message = snapshot.val();
                if (message) {
                    displayMessage(message);
                    updateMessageCount();
                }
            });

            // الاستماع للمستخدمين
            const allUsersRef = database.ref(`rooms/${roomKey}/users`);
            allUsersRef.on('value', (snapshot) => {
                const users = snapshot.val() || {};
                updateUsersList(users);
                updateUserCount(Object.keys(users).length);
            });

            // الاستماع للكتابة
            typingRef.on('value', (snapshot) => {
                const typing = snapshot.val() || {};
                updateTypingIndicator(typing);
            });

            // تحديث آخر نشاط
            setInterval(() => {
                if (usersRef) {
                    usersRef.update({ lastSeen: Date.now() });
                }
            }, 30000); // كل 30 ثانية

            // إرسال رسالة انضمام
            const joinMessage = {
                text: `${currentUser.username} انضم للمحادثة 👋`,
                timestamp: Date.now(),
                type: 'system',
                username: 'النظام',
                userId: 'system'
            };
            
            messagesRef.push(joinMessage);
            
            if (messageInput) messageInput.focus();
            
            // إزالة المستخدم عند إغلاق النافذة
            window.addEventListener('beforeunload', () => {
                if (usersRef) {
                    usersRef.remove();
                }
            });

            console.log('✅ تم دخول الغرفة:', roomKey);
        }

        // عرض رسالة
        function displayMessage(message) {
            if (!messagesContainer) return;

            // إزالة رسالة الترحيب إذا كانت موجودة
            const welcomeMsg = messagesContainer.querySelector('.text-center');
            if (welcomeMsg && messagesContainer.children.length > 1) {
                welcomeMsg.remove();
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = 'message-animation mb-4';

            if (message.type === 'system') {
                messageDiv.innerHTML = `
                    <div class="flex justify-center">
                        <div class="bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 
                                    px-4 py-2 rounded-xl text-sm font-medium max-w-md text-center shadow-sm">
                            ${escapeHtml(message.text)}
                        </div>
                    </div>
                `;
            } else {
                const isMyMessage = message.userId === currentUser.id;
                messageDiv.innerHTML = `
                    <div class="flex ${isMyMessage ? 'justify-end' : 'justify-start'}">
                        <div class="max-w-sm lg:max-w-md px-4 py-3 rounded-2xl shadow-sm ${
                            isMyMessage 
                                ? 'bg-primary text-white rounded-br-md' 
                                : 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-bl-md border border-gray-200 dark:border-gray-600'
                        }">
                            <div class="text-xs opacity-70 mb-1 font-semibold">
                                ${message.username || 'مستخدم غير معروف'}
                            </div>
                            ${message.type === 'image' ? 
                                `<img src="${message.imageUrl}" alt="صورة" class="max-w-full rounded-lg mb-2 cursor-pointer hover:scale-105 transition-transform"
                                     onclick="showImageModal('${message.imageUrl}')">` :
                                `<p class="break-words leading-relaxed">${escapeHtml(message.text)}</p>`
                            }
                            <div class="text-xs opacity-70 mt-2 text-left">
                                ${new Date(message.timestamp).toLocaleTimeString('ar-SA', { 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                })}
                            </div>
                        </div>
                    </div>
                `;
            }

            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // تحديث قائمة المستخدمين
        function updateUsersList(users) {
            if (!usersList) return;

            const userArray = Object.values(users);
            usersList.innerHTML = userArray.map(user => {
                const isOnline = (Date.now() - user.lastSeen) < 60000; // خلال دقيقة واحدة
                const isMe = user.id === currentUser.id;
                
                return `
                    <div class="flex items-center justify-between py-2 ${isMe ? 'bg-blue-50 dark:bg-blue-900/30 rounded-lg px-2' : ''}">
                        <div class="flex items-center space-x-2 space-x-reverse">
                            <div class="w-3 h-3 rounded-full ${isOnline ? 'bg-green-500' : 'bg-gray-400'}"></div>
                            <span class="text-sm font-medium">${user.username}${isMe ? ' (أنت)' : ''}</span>
                        </div>
                        <span class="text-xs text-gray-500">
                            ${isOnline ? 'متصل' : 'غير متصل'}
                        </span>
                    </div>
                `;
            }).join('');
        }

        // تحديث عداد المستخدمين
        function updateUserCount(count) {
            if (userCount) userCount.textContent = `• ${count} مستخدم`;
        }

        // تحديث عداد الرسائل
        function updateMessageCount() {
            if (!messageCount) return;
            const count = messagesContainer.children.length - 1; // -1 للترحيب
            messageCount.textContent = `• ${Math.max(0, count)} رسالة`;
        }

        // مؤشر الكتابة
        function updateTypingIndicator(typing) {
            if (!typingIndicator || !typingText) return;

            const typingUsers = Object.values(typing).filter(user => 
                user.isTyping && user.userId !== currentUser.id && 
                (Date.now() - user.timestamp) < 3000
            );

            if (typingUsers.length > 0) {
                const names = typingUsers.map(user => user.username).join('، ');
                typingText.textContent = `${names} ${typingUsers.length > 1 ? 'يكتبون' : 'يكتب'}...`;
                typingIndicator.classList.remove('hidden');
            } else {
                typingIndicator.classList.add('hidden');
            }
        }

        // إرسال مؤشر الكتابة
        function sendTypingIndicator(isTyping) {
            if (!typingRef || !currentUser) return;

            if (isTyping) {
                typingRef.child(currentUser.id).set({
                    userId: currentUser.id,
                    username: currentUser.username,
                    isTyping: true,
                    timestamp: Date.now()
                });
            } else {
                typingRef.child(currentUser.id).remove();
            }
        }

        // إرسال رسالة
        function sendMessage() {
            if (!messageInput || !messagesRef) return;
            
            const text = messageInput.value.trim();
            if (!text || text.length > 500) return;

            const message = {
                text: text,
                timestamp: Date.now(),
                type: 'text',
                username: currentUser.username,
                userId: currentUser.id
            };

            messagesRef.push(message);
            messageInput.value = '';
            messageInput.style.height = 'auto';
            updateCharCount();
            sendTypingIndicator(false);
        }

        // إرسال صورة
        function handleImageSend(file) {
            if (!file || !file.type.startsWith('image/')) {
                showAlert('يرجى اختيار ملف صورة صحيح');
                return;
            }
            
            if (file.size > 5 * 1024 * 1024) {
                showAlert('حجم الصورة كبير جداً (الحد الأقصى 5 ميجابايت)');
                return;
            }

            if (!allowImages.checked) {
                showAlert('إرسال الصور غير مسموح في هذه الغرفة');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const message = {
                    imageUrl: e.target.result,
                    timestamp: Date.now(),
                    type: 'image',
                    username: currentUser.username,
                    userId: currentUser.id
                };

                messagesRef.push(message);
            };
            reader.readAsDataURL(file);
        }

        // تحديث عداد الأحرف
        function updateCharCount() {
            if (!messageInput || !charCount) return;
            const count = messageInput.value.length;
            charCount.textContent = `${count}/500`;
            charCount.className = count > 450 ? 'absolute bottom-2 left-2 text-xs text-red-400' : 
                                   count > 400 ? 'absolute bottom-2 left-2 text-xs text-yellow-400' : 
                                   'absolute bottom-2 left-2 text-xs text-gray-400';
        }

        // رفع صورة مخصصة
        function handleCustomImage(file) {
            if (!file || !file.type.startsWith('image/')) {
                showAlert('يرجى اختيار ملف صورة صحيح');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const customImage = {
                    url: e.target.result,
                    name: 'صورة مخصصة',
                    id: 'custom_' + Date.now(),
                    emoji: '🖼️',
                    color: '#6B7280'
                };
                
                const imageDiv = document.createElement('div');
                imageDiv.className = `image-hover cursor-pointer rounded-lg overflow-hidden border-3 border-transparent 
                                     hover:border-primary transition-all aspect-square relative bg-gray-100 dark:bg-gray-600`;
                imageDiv.innerHTML = `
                    <img src="${customImage.url}" alt="${customImage.name}" 
                         class="w-full h-full object-cover">
                    <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-30 transition-all 
                                flex items-center justify-center">
                        <span class="text-white text-xs font-bold opacity-0 hover:opacity-100 transition-opacity
                                   bg-black bg-opacity-70 px-2 py-1 rounded">
                            ${customImage.emoji} ${customImage.name}
                        </span>
                    </div>
                    <div class="absolute top-1 left-1 bg-primary text-white text-xs px-2 py-1 rounded">
                        مخصصة
                    </div>
                `;
                
                imageDiv.addEventListener('click', () => selectImage(customImage, imageDiv));
                if (imageGallery) {
                    imageGallery.insertBefore(imageDiv, imageGallery.firstChild);
                    selectImage(customImage, imageDiv);
                }
            };
            reader.readAsDataURL(file);
        }

        // عرض الصورة في نافذة منبثقة
        function showImageModal(imageUrl) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
                <div class="relative max-w-4xl max-h-full">
                    <img src="${imageUrl}" alt="صورة مكبرة" class="max-w-full max-h-full object-contain rounded-lg">
                    <button onclick="this.closest('.fixed').remove()" 
                            class="absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-12 h-12 
                                   flex items-center justify-center hover:bg-opacity-75 transition-colors text-xl">
                        ✕
                    </button>
                </div>
            `;
            document.body.appendChild(modal);
            
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            });
        }

        // مشاركة الغرفة
        function shareRoom() {
            if (!selectedImage || !passwordInput || !passwordInput.value.trim()) {
                showAlert('لمشاركة الغرفة، شارك الصورة المختارة وكلمة المرور مع أصدقائك');
                return;
            }

            const shareText = `🔐 انضم لغرفة المحادثة الآمنة!\n\n` +
                            `الصورة: ${selectedImage.name} ${selectedImage.emoji}\n` +
                            `كلمة المرور: ${passwordInput.value.trim()}\n\n` +
                            `الرابط: ${window.location.origin}`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'غرفة المحادثة الآمنة',
                    text: shareText
                });
            } else if (navigator.clipboard) {
                navigator.clipboard.writeText(shareText).then(() => {
                    showNotification('تم نسخ معلومات الغرفة!', 'success');
                });
            } else {
                showAlert(shareText);
            }
        }

        // مسح المحادثة
        function clearChat() {
            showConfirmDialog('هل أنت متأكد من مسح جميع الرسائل؟', () => {
                if (messagesRef) {
                    messagesRef.remove();
                    messagesContainer.innerHTML = `
                        <div class="text-center py-8">
                            <div class="text-4xl mb-4">🧹</div>
                            <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">تم مسح المحادثة</h3>
                            <p class="text-gray-500 dark:text-gray-400 text-sm mt-2">ابدأ محادثة جديدة...</p>
                        </div>
                    `;
                }
            });
        }

        // مغادرة الغرفة
        function leaveRoom() {
            showConfirmDialog('هل أنت متأكد من مغادرة الغرفة؟', () => {
                // إرسال رسالة مغادرة
                if (messagesRef && currentUser) {
                    const leaveMessage = {
                        text: `${currentUser.username} غادر المحادثة 👋`,
                        timestamp: Date.now(),
                        type: 'system',
                        username: 'النظام',
                        userId: 'system'
                    };
                    messagesRef.push(leaveMessage);
                }

                // إزالة المستخدم من القائمة
                if (usersRef) {
                    usersRef.remove();
                }

                // إيقاف الاستماع
                if (messagesRef) messagesRef.off();
                if (typingRef) typingRef.off();

                // العودة لشاشة الدخول
                chatScreen.classList.add('hidden');
                loginScreen.classList.remove('hidden');
                messagesContainer.innerHTML = `
                    <div class="text-center py-8">
                        <div class="text-4xl mb-4">🎉</div>
                        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">مرحباً بك في الغرفة!</h3>
                        <p class="text-gray-500 dark:text-gray-400 text-sm mt-2">ابدأ المحادثة الآن...</p>
                    </div>
                `;

                // إعادة تعيين المتغيرات
                currentRoom = null;
                currentUser = null;
                messagesRef = null;
                usersRef = null;
                typingRef = null;
            });
        }

        // عرض إشعار
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-20 right-4 z-40 notification ${
                type === 'success' ? 'bg-green-500' : 
                type === 'error' ? 'bg-red-500' :
                type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
            } text-white px-6 py-3 rounded-lg shadow-lg`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // دالة مساعدة لتجنب XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // عرض تنبيه مخصص
        function showAlert(message) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-sm w-full p-6">
                    <div class="text-center">
                        <div class="text-4xl mb-4">⚠️</div>
                        <p class="text-gray-700 dark:text-gray-300 mb-4">${message}</p>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg transition-colors">
                            حسناً
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // عرض تأكيد مخصص
        function showConfirmDialog(message, onConfirm) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-sm w-full p-6">
                    <div class="text-center">
                        <div class="text-4xl mb-4">❓</div>
                        <p class="text-gray-700 dark:text-gray-300 mb-6">${message}</p>
                        <div class="flex justify-center space-x-3 space-x-reverse">
                            <button onclick="this.closest('.fixed').remove()" 
                                    class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors">
                                إلغاء
                            </button>
                            <button onclick="this.closest('.fixed').remove(); (${onConfirm.toString()})()" 
                                    class="px-4 py-2 bg-red-500 text-white hover:bg-red-600 rounded transition-colors">
                                تأكيد
                            </button>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // تهيئة التطبيق عند تحميل DOM
        document.addEventListener('DOMContentLoaded', () => {
            // تعريف جميع العناصر DOM
            firebaseSetup = document.getElementById('firebaseSetup');
            loginScreen = document.getElementById('loginScreen');
            chatScreen = document.getElementById('chatScreen');
            imageGallery = document.getElementById('imageGallery');
            usernameInput = document.getElementById('usernameInput');
            passwordInput = document.getElementById('passwordInput');
            enterRoomBtn = document.getElementById('enterRoomBtn');
            enterBtnText = document.getElementById('enterBtnText');
            uploadImageBtn = document.getElementById('uploadImageBtn');
            customImageInput = document.getElementById('customImageInput');
            privateRoom = document.getElementById('privateRoom');
            allowImages = document.getElementById('allowImages');
            
            roomImagePreview = document.getElementById('roomImagePreview');
            messagesContainer = document.getElementById('messagesContainer');
            messageInput = document.getElementById('messageInput');
            sendMessageBtn = document.getElementById('sendMessageBtn');
            sendImageBtn = document.getElementById('sendImageBtn');
            imageMessageInput = document.getElementById('imageMessageInput');
            charCount = document.getElementById('charCount');
            connectionStatus = document.getElementById('connectionStatus');
            statusText = document.getElementById('statusText');
            userCount = document.getElementById('userCount');
            messageCount = document.getElementById('messageCount');
            roomStatus = document.getElementById('roomStatus');
            
            menuBtn = document.getElementById('menuBtn');
            menuDropdown = document.getElementById('menuDropdown');
            shareRoomBtn = document.getElementById('shareRoomBtn');
            clearChatBtn = document.getElementById('clearChatBtn');
            leaveRoomBtn = document.getElementById('leaveRoomBtn');
            
            usersBtn = document.getElementById('usersBtn');
            usersDropdown = document.getElementById('usersDropdown');
            usersList = document.getElementById('usersList');
            typingIndicator = document.getElementById('typingIndicator');
            typingText = document.getElementById('typingText');
            activeRoomsList = document.getElementById('activeRoomsList');
            connectionInfo = document.getElementById('connectionInfo');
            lastSeen = document.getElementById('lastSeen');

            // إعداد Firebase
            const initFirebaseBtn = document.getElementById('initFirebaseBtn');
            const demoModeBtn = document.getElementById('demoModeBtn');
            const firebaseApiKey = document.getElementById('firebaseApiKey');
            const firebaseDatabaseUrl = document.getElementById('firebaseDatabaseUrl');

            initFirebaseBtn.addEventListener('click', () => {
                const apiKey = firebaseApiKey.value.trim();
                const databaseUrl = firebaseDatabaseUrl.value.trim();
                
                if (apiKey && databaseUrl) {
                    initializeFirebase(apiKey, databaseUrl);
                } else {
                    showAlert('يرجى إدخال API Key و Database URL');
                    return;
                }
                
                firebaseSetup.classList.add('hidden');
                loginScreen.classList.remove('hidden');
                loadImageGallery();
                loadActiveRooms();
            });

            demoModeBtn.addEventListener('click', () => {
                initializeFirebase();
                firebaseSetup.classList.add('hidden');
                loginScreen.classList.remove('hidden');
                loadImageGallery();
            });

            // مستمعي الأحداث - شاشة الدخول
            if (usernameInput) usernameInput.addEventListener('input', updateEnterButton);
            if (passwordInput) passwordInput.addEventListener('input', updateEnterButton);
            if (enterRoomBtn) enterRoomBtn.addEventListener('click', enterRoom);
            if (uploadImageBtn) uploadImageBtn.addEventListener('click', () => customImageInput.click());
            if (customImageInput) customImageInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) handleCustomImage(file);
            });

            // Enter للدخول
            [usernameInput, passwordInput].forEach(input => {
                if (input) {
                    input.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter' && enterRoomBtn && !enterRoomBtn.disabled) {
                            enterRoom();
                        }
                    });
                }
            });

            // مستمعي الأحداث - شاشة المحادثة
            if (messageInput) {
                messageInput.addEventListener('input', () => {
                    updateCharCount();
                    messageInput.style.height = 'auto';
                    messageInput.style.height = messageInput.scrollHeight + 'px';
                    
                    // مؤشر الكتابة
                    clearTimeout(typingTimeout);
                    sendTypingIndicator(true);
                    
                    typingTimeout = setTimeout(() => {
                        sendTypingIndicator(false);
                    }, 2000);
                });

                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });
            }

            if (sendMessageBtn) sendMessageBtn.addEventListener('click', sendMessage);
            if (sendImageBtn) sendImageBtn.addEventListener('click', () => imageMessageInput.click());
            if (imageMessageInput) imageMessageInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) handleImageSend(file);
            });

            // قوائم منسدلة
            if (menuBtn) {
                menuBtn.addEventListener('click', () => {
                    if (menuDropdown) menuDropdown.classList.toggle('hidden');
                    if (usersDropdown) usersDropdown.classList.add('hidden');
                });
            }

            if (usersBtn) {
                usersBtn.addEventListener('click', () => {
                    if (usersDropdown) usersDropdown.classList.toggle('hidden');
                    if (menuDropdown) menuDropdown.classList.add('hidden');
                });
            }
            
            document.addEventListener('click', (e) => {
                if (menuBtn && menuDropdown && !menuBtn.contains(e.target) && !menuDropdown.contains(e.target)) {
                    menuDropdown.classList.add('hidden');
                }
                if (usersBtn && usersDropdown && !usersBtn.contains(e.target) && !usersDropdown.contains(e.target)) {
                    usersDropdown.classList.add('hidden');
                }
            });

            if (shareRoomBtn) {
                shareRoomBtn.addEventListener('click', () => {
                    shareRoom();
                    if (menuDropdown) menuDropdown.classList.add('hidden');
                });
            }

            if (clearChatBtn) {
                clearChatBtn.addEventListener('click', () => {
                    clearChat();
                    if (menuDropdown) menuDropdown.classList.add('hidden');
                });
            }

            if (leaveRoomBtn) {
                leaveRoomBtn.addEventListener('click', () => {
                    leaveRoom();
                    if (menuDropdown) menuDropdown.classList.add('hidden');
                });
            }

            // تحديث عداد الأحرف الأولي
            updateCharCount();

            console.log('✅ تم تهيئة التطبيق بنجاح - Firebase Edition');
        });

        // عرض window functions globally للاستخدام في onclick
        window.showImageModal = showImageModal;
    </script>
</body>
</html>
